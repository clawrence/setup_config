Info on Database id options. 

natural keys (ideal, but can be problematic when they unexpectedly change, or need to protect confidentiality)


In rails sometimes they would slugify keys into a unique id.  I'm not a big fan but it another way it is done.

For a more enterprise view, I examined 'Implementing Domain Driven Design' ch5 below:

UUID is fast and easy way for App to provide identify.  Good when it can be hidden from the users and human readable reference techniques can be used.

[Another option is to generate your own where the contents benefit from human readability.  This can help identify the origin of the data. ] 

[Identity generation is in third-party libraries and frameworks.  Appache Commons has Commons Id componnent.  Riak and MongoDB can generate ids for you.]

Many ORM such as hibernate want to deal with object identity on their own terms.
They prefer numeric types such as numeric sequence, as the primary identity of each Entity.  If the domain requires another identity, you can use two identitiees.  One for the domain model complies with domain requirments.  The other is a surogate identity that works well with hibernate.

It's best to hide surrogate attribute from the outside world, visibility constitutes persistance leakage.  One safe guard is a Layer Supertype (basically an abstract base class, i.e., DomainObjectId,  for the surrogate primary key which hides access from clients with the methods as protected for private).

Now, DomainObjectId id would be primary id.  It will be simple long for hibernate in sql.  It is the primary key that cna be generated by a sequence.  The domain identity no longer has to be the primary key.  This surrogate key can be used throughout the data model as foreign keys in other tables, providing referential integrity.   This may be helpful with audits and/or support tools.  The referential integrity is important for HIbernate when wiring tables together to impleent the various any-to-ny mappings.  They support table joins to optimize queries.


Google found list of issues people have had just using UUID with pro/con:

https://tomharrisonjr.com/uuid-or-guid-as-primary-keys-be-careful-7b2aa3dcb439

PRO:
  1) UUID can be unique accross multiple DB
  2) id known before insert
  3) UUID does not reveal data & protect data privacy

CON:
  1) 9X increase cost in terms of data size to store
  2) Strings don't sort as fast as numbers
  3) character set conversions can impact indexes
  4) primary keys get around in normalized dbs and carry over to memory, disk space as you scale.  Impact intermediate tables with foreign keys, etc.
  5) hard to sort random numbers (sql server implemented newsequentialid() function for use in clustered indexes for UUID PKs)
  6) primary keys should never be exposed even UUIDs.  Microsoft warns against newsequentialid becuase makes the key more guessable.

Best of Both Worlds:
  1) use surrogate... kind of like book above recommended.
  2) They also mention slugs as human readable rather than UUID like we used in rails.
  3) avoid UUID even as secondary primary key in string form.

----

@Entity
@Immutable
public class bla {
}

This is a way above that hibernate supposedly won't have to do dirty checking.



  
